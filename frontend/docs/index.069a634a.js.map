{"mappings":"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","sources":["src/stensax.js"],"sourcesContent":["// Hitta HTML-element\nconst nameInput = document.getElementById(\"name\");\nconst nameInputLabel = document.getElementById(\"name-label\");\nconst startButton = document.getElementById(\"startButton\");\nconst gameContainer = document.getElementById(\"game\");\nconst playerName = document.getElementById(\"playerName\");\nconst playerScore = document.getElementById(\"playerScore\");\nconst rockButton = document.getElementById(\"rockButton\");\nconst scissorsButton = document.getElementById(\"scissorsButton\");\nconst paperButton = document.getElementById(\"paperButton\");\nconst resultContainer = document.getElementById(\"result\");\nconst resultText = document.getElementById(\"resultText\");\nconst restartButton = document.getElementById(\"restartButton\");\nconst nameForm = document.getElementById(\"nameForm\");\nconst playerChoiceElement = document.getElementById(\"playerChoice\");\nconst computerChoiceElement = document.getElementById(\"computerChoice\");\nconst highScoreList = document.getElementById(\"highScoreList\"); // Här lagrar vi referensen till highscore-listan\nconst newPlayerButton = document.getElementById(\"newPlayer\"); // Knapp för ny spelare\n\ninitializeHighScoreList();\n\n// Spelvariabler\nlet name = \"\";\nlet playerPoints = 0;\nlet computerPoints = 0;\n\n// Lyssna på formuläret för att starta spelet\nnameForm.addEventListener(\"submit\", function (event) {\n    event.preventDefault(); // Förhindra standardformulärinskickning\n    name = nameInput.value;\n    if (name) {\n        playerName.textContent = name;\n        showGameScreen();\n    }\n});\n\n// visa spelet\nfunction showGameScreen() {\n    nameInput.style.display = \"none\"; // Dölj input\n    nameInputLabel.style.display = \"none\";\n    startButton.style.display = \"none\";\n    gameContainer.style.display = \"block\"; // Visa spel-div\n    resultContainer.style.display = \"none\";\n    restartButton.style.display = \"none\";\n}\n\n// visa resultatet efter varje spelrunda\nfunction showResultScreen(result) {\n    resultText.textContent = result;\n    resultContainer.style.display = \"block\";\n}\n\n// uppdatera poängen för user\nfunction updateScores() {\n    playerName.textContent = name;\n    playerScore.textContent = playerPoints;\n}\n\n// generera ett slumpmässigt val av sten, sax eller påse för datorn\nfunction getRandomChoice() {\n    const choices = [\"rock\", \"scissors\", \"paper\"];\n    const randomIndex = Math.floor(Math.random() * choices.length);\n    return choices[randomIndex];\n}\n\n// Lyssna på val av sten\nrockButton.addEventListener(\"click\", function () {\n    playRound(\"rock\");\n});\n\n// Lyssna på val av sax\nscissorsButton.addEventListener(\"click\", function () {\n    playRound(\"scissors\");\n});\n\n// Lyssna på val av påse\npaperButton.addEventListener(\"click\", function () {\n    playRound(\"paper\");\n});\n\n// utförandet av en spelrunda\nfunction playRound(playerChoice) {\n    const computerChoice = getRandomChoice();\n\n    let result;\n    if (playerChoice === computerChoice) {\n        result = \"Oavgjort! 👀\";\n    } else if (\n        (playerChoice === \"rock\" && computerChoice === \"scissors\") ||\n        (playerChoice === \"scissors\" && computerChoice === \"paper\") ||\n        (playerChoice === \"paper\" && computerChoice === \"rock\")\n    ) {\n        result = \"Du vinner rundan!\";\n        playerPoints++;\n    } else {\n        result = \"Datorn vinner rundan!\";\n        computerPoints++;\n    }\n\n    updateScores();\n    showResultScreen(result);\n\n    if (computerPoints === 1) {\n        let finalResult = \"Game over! Datorn vinner spelet! 💻\";\n        showResultScreen(finalResult);\n        rockButton.disabled = true;\n        scissorsButton.disabled = true;\n        paperButton.disabled = true;\n        restartButton.style.display = \"block\";\n        computerChoiceElement.style.display = \"none\";\n        playerChoiceElement.style.display = \"none\";\n\n        // Spara high score-data när spelet är över\n        const highScoreData = { playerName: name, currentScore: playerPoints };\n        saveHighScore(highScoreData, function () {\n            // Anropa initializeHighScoreList() för att uppdatera highscore-listan i frontend\n            initializeHighScoreList();\n        });\n    } else {\n        playerChoiceElement.textContent = `Spelare: ${playerChoice}`;\n        computerChoiceElement.textContent = `Dator: ${computerChoice}`;\n        playerChoiceElement.style.display = \"block\";\n        computerChoiceElement.style.display = \"block\";\n    }\n}\n\n// Lyssna på starta om-knappen, återställer spelet.\nrestartButton.addEventListener(\"click\", function () {\n    playerPoints = 0;\n    computerPoints = 0;\n    updateScores();\n    restartButton.style.display = \"none\";\n    rockButton.disabled = false;\n    scissorsButton.disabled = false;\n    paperButton.disabled = false;\n    showGameScreen();\n\n});\n\n// Funktion för att visa knappen för ny spelare\nfunction showNewPlayerButton() {\n    newPlayerButton.style.display = \"block\";\n}\n\n// Lyssna på knappen för ny spelare\nnewPlayerButton.addEventListener(\"click\", function () {\n    nameInput.style.display = \"block\";\n    nameInputLabel.style.display = \"block\";\n    startButton.style.display = \"block\";\n    gameContainer.style.display = \"none\";\n    resultContainer.style.display = \"none\";\n    newPlayerButton.style.display = \"none\";\n});\n\n// Spara high score på servern när användaren klickar på \"New Player\"-knappen\nnewPlayerButton.addEventListener(\"click\", function () {\n    window.location.reload(); // Ladda om sidan för att starta med en ny spelare\n});\n\n\n\n/*-----------------------high score board --- ny kod*/\n\n// get high score-listan\nfunction initializeHighScoreList() {\n    // Gör en fetch-förfrågan till din backend för att hämta high score-data\n    fetch(\"http://localhost:3000/api/highscore\")\n        .then((response) => response.json())\n        .then((data) => {\n            // Sortera highscore-data i fallande ordning baserat på currentScore\n            data.sort((a, b) => b.currentScore - a.currentScore);\n\n            // Ta de fem högsta resultaten (om de finns)\n            const topFive = data.slice(0, 5);\n\n            // Rensa befintliga resultat från listan\n            while (highScoreList.firstChild) {\n                highScoreList.removeChild(highScoreList.firstChild);\n            }\n\n            // Uppdatera highscore-listan med de fem högsta resultaten\n            topFive.forEach((score, index) => {\n                const listItem = document.createElement(\"li\");\n                listItem.textContent = `${index + 1}. ${score.playerName}: ${score.currentScore}`;\n                highScoreList.appendChild(listItem);\n            });\n        })\n        .catch((error) => {\n            console.error(\"Fel vid hämtning av highscore-data:\", error);\n        });\n}\n\n// Skicka POST-förfrågan med high score-data till backend\nfunction saveHighScore(highScoreData, callback) {\n    // Skicka POST-förfrågan med high score-data till backend\n    fetch('http://localhost:3000/api/savehighscore', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(highScoreData), // Skicka objektet som JSON\n    })\n        .then((response) => response.json())\n        .then((data) => {\n            // Hantera svaret från servern om det behövs\n            console.log('Svar från server:', data);\n            if (typeof callback === 'function') {\n                callback(); // Anropa callback-funktionen efter att highscore-listan har uppdaterats\n            }\n        })\n        .catch((error) => {\n            console.error('Fel vid sändning av data:', error);\n        });\n    initializeHighScoreList();\n}\n\n\n\n"],"names":[],"version":3,"file":"index.069a634a.js.map","sourceRoot":"/__parcel_source_root/"}